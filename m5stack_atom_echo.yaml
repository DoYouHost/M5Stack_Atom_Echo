substitutions:
  name: m5stack-atom-echo
  friendly_name: M5Stack Atom Echo
  ap_password: "123456789"
  ota_password: "123456789"

esphome:
  name: ${name}
  name_add_mac_suffix: true
  friendly_name: ${friendly_name}
  min_version: 2025.5.1

  project:
      name: DoYouHost.M5Stack_Atom_Echo

esp32:
  board: m5stack-atom
  cpu_frequency: 240MHz
  flash_size: 4MB
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      # # Size optimization flags
      # CONFIG_COMPILER_OPTIMIZATION_SIZE: "y"
      # CONFIG_COMPILER_OPTIMIZATION_ASSERTIONS_SILENT: "y"
      # CONFIG_COMPILER_OPTIMIZATION_CHECKS_SILENT: "y"
      # CONFIG_LOG_DEFAULT_LEVEL_ERROR: "y"
      # CONFIG_LOG_MAXIMUM_LEVEL_ERROR: "y"
      # CONFIG_ESP_ERR_TO_NAME_LOOKUP: "n"
      # CONFIG_ESP_SYSTEM_PANIC_SILENT_REBOOT: "y"
      # # Newlib optimizations
      # CONFIG_LIBC_NEWLIB_NANO_FORMAT: "y"
      # # VFS optimizations (if not using filesystem features)
      # CONFIG_VFS_SUPPORT_TERMIOS: "n"
      # CONFIG_VFS_SUPPORT_SELECT: "n"
      # CONFIG_VFS_SUPPORT_DIR: "n"
      # # WiFi optimizations (if WPA3/enterprise not needed)
      # CONFIG_ESP_WIFI_ENABLE_WPA3_SAE: "n"
      # CONFIG_ESP_WIFI_ENTERPRISE_SUPPORT: "n"

packages: 
  esp32_package:
    url: https://github.com/MorganMLGman/ESPHomeBaseFiles
    files:
      - base.yaml
      - ESP32/diagnostic.yaml
      - ESP32/debug.yaml
    ref: master
    refresh: 0s

logger:
  level: DEBUG
  logs:
    sensor: WARN

debug:
  update_interval: 5s

wifi:
  id: wifi_id
  enable_btm: true
  enable_rrm: true

captive_portal:

http_request:

ota:
  - platform: esphome
    id: ota_esphome
    password: ${ota_password}
  - platform: http_request
    id: ota_http

update:
  - platform: http_request
    id: update_http_request
    name: Firmware Update
    source: https://morganmlg.com/esphome-atom-echo/M5Stack_Atom_Echo/manifest.json

globals:
  - id: led_red
    type: float
    restore_value: true
    initial_value: '1.0'

  - id: led_green
    type: float
    restore_value: true
    initial_value: '0.89'

  - id: led_blue
    type: float
    restore_value: true
    initial_value: '0.71'
  
  - id: led_brightness
    type: float
    restore_value: true
    initial_value: '0.60'
  
  - id: not_playing_wake_word
    type: bool
    restore_value: false
    initial_value: "true"

light:
  - platform: esp32_rmt_led_strip
    id: led
    name: LED
    disabled_by_default: false
    entity_category: config
    pin: GPIO27
    default_transition_length: 0s
    chipset: SK6812
    num_leds: 1
    rgb_order: grb
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%

script:
  - id: get_led_color
    then:
      - lambda: |-
          auto led_color = id(led).current_values;
          id(led_red) = led_color.get_red();
          id(led_green) = led_color.get_green();
          id(led_blue) = led_color.get_blue();
          id(led_brightness) = led_color.get_brightness();
          // ESP_LOGI("get_led_color", "Red: %f, Green: %f, Blue: %f, Brightness: %f", id(led_red), id(led_green), id(led_blue), id(led_brightness));

  - id: reset_led
    then:
      - if:
          condition:
            - switch.is_on: use_listen_light
          then:
            - light.turn_on:
                id: led
                red: !lambda return id(led_red);
                green: !lambda return id(led_green);
                blue: !lambda return id(led_blue);
                brightness: !lambda return id(led_brightness);
                effect: none
          else:
            - light.turn_off: led

  - id: start_wake_word
    then:
      - if:
          condition:
            not:
              - voice_assistant.is_running:
          then:
            - lambda: id(va).set_use_wake_word(false);
            - micro_wake_word.start:

  - id: stop_wake_word
    then:
      - micro_wake_word.stop:

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO39
      inverted: true
    name: Button
    disabled_by_default: true
    entity_category: diagnostic
    id: echo_button
    on_multi_click:
      - timing:
          - ON for at least 50ms
          - OFF for at least 50ms
        then:
          - if:
              condition:
                switch.is_on: timer_ringing
              then:
                - switch.turn_off: timer_ringing
              else:
                - script.execute: start_wake_word
      - timing:
          - ON for at least 10s
        then:
          - button.press: factory_reset_button_0

switch:
  - platform: template
    id: beta_firmware
    name: Beta firmware
    icon: "mdi:test-tube"
    disabled_by_default: true
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - logger.log: "OTA updates set to use Beta firmware"
      - lambda: id(update_http_request).set_source_url("https://morganmlg.com/esphome-atom-echo/M5Stack_Atom_Echo/manifest-beta.json");
      - component.update: update_http_request
    on_turn_off:
      - logger.log: "OTA updates set to use Production firmware"
      - lambda: id(update_http_request).set_source_url("https://morganmlg.com/esphome-atom-echo/M5Stack_Atom_Echo/manifest.json");
      - component.update: update_http_request

  - platform: template
    name: Use listen light
    id: use_listen_light
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_on:
      - script.execute: reset_led
    on_turn_off:
      - script.execute: reset_led
  - platform: template
    name: Use wake sound
    id: use_wake_sound
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
  - platform: template
    id: timer_ringing
    optimistic: true
    restore_mode: ALWAYS_OFF
    on_turn_off:
      # Turn off the repeat mode and disable the pause between playlist items
      - lambda: |-
              id(echo_media_player)
                ->make_call()
                .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_OFF)
                .set_announcement(true)
                .perform();
              id(echo_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 0);
      # Stop playing the alarm
      - media_player.stop:
          announcement: true
    on_turn_on:
      # Turn on the repeat mode and pause for 1000 ms between playlist items/repeats
      - lambda: |-
            id(echo_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_ONE)
              .set_announcement(true)
              .perform();
            id(echo_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 1000);
      - media_player.speaker.play_on_device_media_file:
          media_file: timer_finished_wave_file
          announcement: true
      - delay: 15min
      - switch.turn_off: timer_ringing

select:
  - platform: template
    name: "Wake word sensitivity"
    optimistic: true
    initial_option: Moderately sensitive
    restore_value: true
    entity_category: config
    options:
      - Slightly sensitive
      - Moderately sensitive
      - Very sensitive
    on_value:
      lambda: |-
        if (x == "Slightly sensitive") {
          id(okay_nabu).set_probability_cutoff(254);  // Modified for fewer activations
        } else if (x == "Moderately sensitive") {
          id(okay_nabu).set_probability_cutoff(217);
        } else if (x == "Very sensitive") {
          id(okay_nabu).set_probability_cutoff(176);
        }

  # - platform: template
  #   entity_category: config
  #   name: Wake word engine location
  #   id: wake_word_engine_location
  #   optimistic: true
  #   restore_value: true
  #   options:
  #     - In Home Assistant
  #     - On device
  #   initial_option: On device
  #   on_value:
  #     - if:
  #         condition:
  #           lambda: return x == "In Home Assistant";
  #         then:
  #           - micro_wake_word.stop:
  #           - delay: 500ms
  #           - lambda: id(va).set_use_wake_word(true);
  #           - voice_assistant.start_continuous:
  #     - if:
  #         condition:
  #           lambda: return x == "On device";
  #         then:
  #           - lambda: id(va).set_use_wake_word(false);
  #           - voice_assistant.stop:
  #           - delay: 500ms
  #           - micro_wake_word.start:

i2s_audio:
  - id: i2s_audio_bus
    i2s_lrclk_pin: GPIO33
    i2s_bclk_pin: GPIO19

microphone:
  - platform: i2s_audio
    id: echo_microphone
    i2s_din_pin: GPIO23
    adc_type: external
    pdm: true
    sample_rate: 16000
    correct_dc_offset: true

speaker:
  - platform: i2s_audio
    id: echo_speaker
    i2s_dout_pin: GPIO22
    dac_type: external
    bits_per_sample: 16bit
    sample_rate: 16000
    channel: stereo
    buffer_duration: 60ms

media_player:
  - platform: speaker
    name: None
    id: echo_media_player
    announcement_pipeline:
      speaker: echo_speaker
      format: WAV
    codec_support_enabled: false
    buffer_size: 6000
    files:
      - id: timer_finished_wave_file
        file: https://github.com/DoYouHost/M5Stack_Atom_Echo/raw/main/sounds/timer_finished.wav
      - id: wake_word_triggered_wave_file
        file: https://github.com/DoYouHost/M5Stack_Atom_Echo/raw/main/sounds/wake_word_triggered1.wav
    on_announcement:
      - if:
          condition:
            - microphone.is_capturing:
          then:
            - script.execute: stop_wake_word
            - script.execute: reset_led
      - light.turn_on:
          id: led
          blue: 100%
          red: 0%
          green: 0%
          brightness: 100%
          effect: none
    on_idle:
      - script.execute: start_wake_word
      - script.execute: reset_led

micro_wake_word:
  microphone: echo_microphone
  vad:
  models:
    - model: okay_nabu
      id: okay_nabu
  on_wake_word_detected:
    then:
      - script.execute: get_led_color
      - if:
          condition:
            switch.is_on: use_wake_sound
          then:
            - lambda: id(not_playing_wake_word) = false;
            - media_player.speaker.play_on_device_media_file:
                media_file: wake_word_triggered_wave_file
                announcement: true
            - delay: 20ms
            - wait_until:
                and:
                  - media_player.is_idle:
                  - speaker.is_stopped:
            - lambda: id(not_playing_wake_word) = true;
      - voice_assistant.start:
          wake_word: !lambda return wake_word;

voice_assistant:
  id: va
  micro_wake_word:
  microphone:
    microphone: echo_microphone
    channels: 0
    gain_factor: 4
  media_player: echo_media_player
  noise_suppression_level: 2
  auto_gain: 31dBFS
  on_listening:
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        effect: "Slow Pulse"
  on_stt_vad_end:
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        effect: "Fast Pulse"
  on_tts_start:
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        brightness: 100%
        effect: none
  on_end:
    - wait_until:
        condition:
          - media_player.is_announcing:
        timeout: 0.5s
    - wait_until:
        - and:
            - not:
                voice_assistant.is_running:
            - not:
                speaker.is_playing:
    - lambda: id(va).set_use_wake_word(false);
    - micro_wake_word.start:
    - script.execute: reset_led
  on_error:
    - light.turn_on:
        id: led
        red: 100%
        green: 0%
        blue: 0%
        brightness: 100%
        effect: none
    - delay: 2s
    - script.execute: reset_led
  on_client_connected:
    - delay: 2s
    - script.execute: start_wake_word
  on_client_disconnected:
    - script.execute: stop_wake_word
  on_timer_finished:
    - script.execute: stop_wake_word
    - wait_until:
        not:
          microphone.is_capturing:
    - switch.turn_on: timer_ringing
    - light.turn_on:
        id: led
        red: 0%
        green: 100%
        blue: 0%
        brightness: 100%
        effect: "Fast Pulse"
    - wait_until:
        - switch.is_off: timer_ringing
    - light.turn_off: led
    - switch.turn_off: timer_ringing
